{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridGifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","console","log","gifs","map","img","id","title","images","downsized_medium","GridGifItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,0BAAMC,SATW,SAAEC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAMd,2BACIO,KAAM,OACNC,MAAQT,EACRU,SAjBa,SAAEP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAERC,QAAQC,IAAI,CAAEF,SAERG,EAAOH,EAAKI,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAKU,EAAIG,OAAOC,iBAAiBd,QAXtB,kBAeZQ,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOZ,EAAW,EAAXA,IAClC,OACI,yBAAKgB,UAAU,0DACX,yBAAKC,IAAMjB,EAAMkB,IAAMN,IACvB,2BAAIA,KCDHO,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAc,MAGdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAL2B,mBAGjCC,EAHiC,KAG1BC,EAH0B,KAuBxC,OAbAC,qBAAW,WAEP1B,EAASC,GACJ0B,MAAM,SAAAC,GAEHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAItB,CAAEtB,IAEEuB,EDnB0BK,CAAc5B,GAAlCe,EAJwB,EAI7BR,KAAae,EAJgB,EAIhBA,QAGrB,OACI,oCACI,wBAAIJ,UAAU,qCAAsClB,GAEnDsB,GAAW,uBAAGJ,UAAU,oCAAb,WAEZ,yBAAKA,UAAU,aAEPH,EAAOJ,KAAK,SAAAC,GACR,OAAO,kBAAC,EAAD,eAAaiB,IAAMjB,EAAIC,IACND,UEYjCkB,EA7BM,WAAM,MAGa5C,mBAAS,CAAC,gBAHvB,mBAGhB6C,EAHgB,KAGJ9C,EAHI,KASvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ8C,EAAWpB,KAAK,SAAAX,GACZ,OAAO,kBAAC,EAAD,CACK6B,IAAM7B,EACNA,SAAYA,UCpBhDgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.1e4a1532.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputValue = ( e ) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategories( cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type= \"text\"\n                value={ inputValue }\n                onChange={ handleInputValue }/>\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async( category ) =>{\n    const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=XTPDqQ4b0o88erpkX83h4MxaHzVTgEin`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    console.log({ data });\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    }) \n\n    return gifs;\n} \n","import React from 'react'\n\nexport const GridGifItem = ( { title, url } ) => {\n    return (\n        <div className=\"card animate__animated animate__bounce animate__fadeIn\">\n            <img src={ url } alt={ title }/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GridGifItem } from './GridGifItem';\n\n\nexport const GifGrid = ({ category }) => {\n\n    // llamada al custom hook y desestructuracion para obtener el campo del objeto de retorno \"loading\"\n    // renombrado de la data\n    const { data:images, loading } = useFetchGifs( category );\n\n   \n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n            <div className=\"card-grid\">\n                {\n                    images.map( img => {\n                        return <GridGifItem key= {img.id} \n                                            {...img} />\n                    }) \n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState} from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\n\n//custom hook, es como un function component (hecho con el snnipet rafcp borrando cosas)\nexport const useFetchGifs = ( category ) => {\n    \n    //cuando se renderize este hook, se cargara el state con este objeto por defecto\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // //el hook useEffect sirve para que lo que va dentro solo se dispare cuando cambie la categoriy (o solo una vez si\n    // no metemos nada\n    useEffect( () => {\n    \n        getGifs( category )\n            .then( imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n            })\n    }, [ category ])\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n// Functional component  - rafcp\nconst GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Saurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['Dragon Ball']);\n\n    // const handleAdd = () => {\n    //     setCategories( [...categories, 'HunterXHunter'])\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n\n            <ol>\n                {\n                    categories.map( category => {\n                        return <GifGrid \n                                    key= {category}\n                                    category = {category} \n                                />\n                    })\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}